{"version":3,"sources":["app.js"],"names":["display","document","querySelector","includes","buttons","Array","from","querySelectorAll","sanitizeExpression","expr","replace","value","placeholder","slice","isOperator","ch","Function","test","appendOperator","op","cur","concat","setDisplay","lastChar","handleButton","match","prefix","numberPart","trim","val","Number","m","String","evaluateExpression","setTimeout","result","isInteger","parseFloat","toPrecision","toString","btn","forEach","addEventListener","e","key","preventDefault"],"mappings":"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","file":"app.min.js","sourcesContent":["// const name = `Destiny Ogorchukwu`;\r\n// const age = 41;\r\n\r\n// const hello = (x) => {\r\n//     return `Hello, my name is ${x}!`;\r\n// }\r\n\r\n// const greet = hello(name);\r\n\r\n// const person = (y) => {\r\n//     // Check if age is an integer\r\n//     if (!Number.isInteger(y)) {\r\n//         throw new Error(\"Age must be a whole number (integer).\");\r\n//     }\r\n\r\n//     if (y <= 20) {\r\n//         return `${greet}, and I am a teenager.`;\r\n//     } else if (y > 20 && y <= 40) {\r\n//         return `${greet}, and I am a middle aged adult.`;\r\n//     } else {\r\n//         return `${greet}, and I am older than 4 decades.`;\r\n//     }\r\n// }\r\n\r\n// // try {\r\n// //     const profile = person(age);\r\n// //     console.log(profile);\r\n// // } catch (error) {\r\n// //     console.error(error.message);\r\n// // }\r\n\r\n// function calculate(num1, num2, operator) {\r\n//     let result;\r\n\r\n//     switch (operator) {\r\n//         case \"+\":\r\n//             result = num1 + num2;\r\n//             break;\r\n//         case \"-\":\r\n//             result = num1 - num2;\r\n//             break;\r\n//         case \"*\":\r\n//             result = num1 * num2;\r\n//             break;\r\n//         case \"/\":\r\n//             if (num2 === 0) {\r\n//                 result = \"Error: Division by zero\";\r\n//             } else {\r\n//                 result = num1 / num2;\r\n//             }\r\n//             break;\r\n//         case \"%\":\r\n//             result = num1 % num2;\r\n//             break;\r\n//         default:\r\n//             result = \"Invalid operator\";\r\n//     }\r\n\r\n//     return result;\r\n// }\r\n\r\n// Example usage:\r\n// console.log(calculate(10, 5, \"+\")); // 15\r\n// console.log(calculate(10, 5, \"/\")); // 2\r\n// console.log(calculate(10, 0, \"/\")); // \"Error: Division by zero\"\r\n// console.log(calculate(10, 5, \"?\")); // \"Invalid operator\"\r\n\r\n\r\n\r\n\r\n// if (2 + 2 === 4) {\r\n//     switch (true) {\r\n//         case (2 + 2 === 4):\r\n//             console.log(\"Math still works!\");\r\n//     }\r\n// }\r\n\r\n\r\n// jav.js (without switch)\r\nconst display = document.querySelector('.display input');\r\nconst buttons = Array.from(document.querySelectorAll('input[type=\"button\"]'));\r\n\r\nfunction setDisplay(value) {\r\n    display.value = value === '' || value == null ? '' : String(value);\r\n    display.placeholder = display.value === '' ? '0' : '';\r\n}\r\n\r\nfunction lastChar() {\r\n    return display.value.slice(-1);\r\n}\r\n\r\nconst isOperator = (ch) => ['+', '-', '*', '/', '.'].includes(ch);\r\n\r\nfunction sanitizeExpression(expr) {\r\n    return expr.replace(/ร/g, '*').replace(/x/gi, '*').replace(/รท/g, '/');\r\n}\r\n\r\nfunction evaluateExpression(expr) {\r\n    expr = sanitizeExpression(expr).replace(/\\s+/g, '');\r\n    if (!/^[0-9+\\-*/().]+$/.test(expr)) {\r\n        throw new Error('Invalid characters');\r\n    }\r\n    if (isOperator(expr.slice(-1))) {\r\n        expr = expr.slice(0, -1);\r\n    }\r\n    return Function(`\"use strict\"; return (${expr});`)();\r\n}\r\n\r\nfunction appendOperator(op) {\r\n    const cur = display.value;\r\n    if (cur === '' && op === '-') {\r\n        setDisplay('-');\r\n        return;\r\n    }\r\n    if (cur === '' || isOperator(lastChar())) {\r\n        setDisplay(cur.slice(0, -1) + op);\r\n    } else {\r\n        setDisplay(cur + op);\r\n    }\r\n}\r\n\r\nfunction handleButton(value) {\r\n    const cur = display.value;\r\n\r\n    if (value === 'AC') {\r\n        setDisplay('');\r\n    }\r\n    else if (value === 'DEL') {\r\n        setDisplay(cur.slice(0, -1));\r\n    }\r\n    else if (value === '%') {\r\n        if (cur.trim() !== '') {\r\n            const m = cur.match(/(.*?)(\\d+(\\.\\d+)?)$/);\r\n            if (m) {\r\n                const prefix = m[1] || '';\r\n                const numberPart = m[2];\r\n                const percentVal = String(Number(numberPart) / 100);\r\n                setDisplay(prefix + percentVal);\r\n            } else {\r\n                const val = Number(cur);\r\n                if (!Number.isNaN(val)) setDisplay(String(val / 100));\r\n            }\r\n        }\r\n    }\r\n    else if (value === '=') {\r\n        try {\r\n            if (cur.trim() !== '') {\r\n                const expr = cur.replace(/x/gi, '*');\r\n                const result = evaluateExpression(expr);\r\n                const rounded =\r\n                    typeof result === 'number' && !Number.isInteger(result)\r\n                        ? parseFloat(result.toPrecision(12)).toString()\r\n                        : String(result);\r\n                setDisplay(rounded);\r\n            }\r\n        } catch {\r\n            setDisplay('Error');\r\n            setTimeout(() => setDisplay(''), 900);\r\n        }\r\n    }\r\n    else if (value === 'x') {\r\n        appendOperator('*');\r\n    }\r\n    else if (value === '/' || value === '+' || value === '-') {\r\n        appendOperator(value);\r\n    }\r\n    else if (value === '.') {\r\n        const match = cur.match(/(\\d*\\.\\d*|\\d+)$/);\r\n        if (match && match[0].includes('.')) return;\r\n        if (cur === '' || isOperator(lastChar())) {\r\n            setDisplay(cur + '0.');\r\n        } else {\r\n            setDisplay(cur + '.');\r\n        }\r\n    }\r\n    else if (value === '00') {\r\n        if (cur === '' || (cur === '0' && !cur.includes('.'))) {\r\n            setDisplay('0');\r\n        } else {\r\n            setDisplay(cur + '00');\r\n        }\r\n    }\r\n    else if (/^\\d$/.test(value)) {\r\n        if (cur === '0') {\r\n            setDisplay(value);\r\n        } else {\r\n            setDisplay(cur + value);\r\n        }\r\n    }\r\n    else {\r\n        setDisplay(cur + value);\r\n    }\r\n}\r\n\r\nbuttons.forEach((btn) => {\r\n    btn.addEventListener('click', () => handleButton(btn.value));\r\n});\r\n\r\ndocument.addEventListener('keydown', (e) => {\r\n    const key = e.key;\r\n    if (key === 'Enter') {\r\n        e.preventDefault();\r\n        handleButton('=');\r\n    } else if (key === 'Backspace') {\r\n        e.preventDefault();\r\n        handleButton('DEL');\r\n    } else if (/^[0-9]$/.test(key)) {\r\n        handleButton(key);\r\n    } else if (['.', '+', '-', '/', '%'].includes(key)) {\r\n        handleButton(key);\r\n    } else if (key === '*') {\r\n        handleButton('x');\r\n    }\r\n});\r\n\r\nsetDisplay('');\r\n"]}