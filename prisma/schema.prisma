// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  password String
  name     String
  role     Role   @default(BUYER)

  kycStatus KYCStatus @default(PENDING)
  kycData   Json?

  Store    Store[]
  CartItem CartItem[]
  Order    Order[]
  address  Address?
}

model Store {
  id          String  @id @default(uuid())
  ownerId     String  @unique
  name        String
  description String?

  owner    User      @relation(fields: [ownerId], references: [id])
  products Product[]
}

model Product {
  id      String   @id @default(uuid())
  storeId String
  title   String
  size    Float
  color   String
  price   Float
  stock   Int
  images  String[]

  store     Store       @relation(fields: [storeId], references: [id])
  cart      CartItem[]
  OrderItem OrderItem[]
}

model Order {
  id          String      @id @default(uuid())
  userId      String
  totalAmount Float
  status      OrderStatus
  createdAt   DateTime    @default(now())

  user    User        @relation(fields: [userId], references: [id])
  items   OrderItem[]
  address Address?    @relation(fields: [addressId], references: [id])

  addressId String?
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float // snapshot at purchase time

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model CartItem {
  id        String @id @default(uuid())
  userId    String
  productId String
  quantity  Int

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId]) // helpful: one row per product in a user's cart
}

model Address {
  id         String   @id @default(uuid())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id])
  street     String
  city       String
  state      String
  country    String
  postalCode String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  order      Order[]
}

enum KYCStatus {
  PENDING
  ACTIVE
  DENIAL
}

enum Role {
  BUYER
  SELLER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}
